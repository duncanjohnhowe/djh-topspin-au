/*****************************************************************************/
/*****************************************************************************/
/*
Program:  CYCalc13C
Version:  1.0
Author:   John Hollerton, GSK R&D
Description:
Calculates vertical scale setting (CY) for 1D carbon spectra 

History


V1.0 First release - 
*/
/*****************************************************************************/
/*****************************************************************************/

int i,j,isave,numpeaks,nregions,peakvalid,nmultiplets;
float JPA[501],JPH[501],JPP[501],JPI[501],reglow[10],reghigh[10],cytmp,JY;
float TPA[501],TPH[501],TPP[501],TPI[501];
float AvY, sumY, peakmax, peakmin, initialcy;
float maxcy,mincy,jmi;
char a[120],del[80],*ptr, path[80],*fgets(),curp[20],foutname[200],outstr[200],jcmd[200];
char nucleus[10],solvent[20],sreglist[60],sregpath[200],h1[120],h2[120],h3[120],h4[120];
char logfile[200];
FILE *fptr,*fopen(),*fout,*flog;

// Increase JY if you want bigger spectra (& v.v.)
JY=30;

// Set maximum range of CY values
maxcy=150.0;
mincy=30.0;

// initialcy and jmi help define what intensity of peaks are picked
initialcy=500.0;
jmi=2.0;

GETCURDATA
STOREPAR("PC", 1.5)
STOREPAR("ASSFAC", 0)
STOREPAR("CY", initialcy)
STOREPAR("F1P",15.0)
STOREPAR("F2P",-0.5)
STOREPAR("MI",jmi)
STOREPAR("PSCAL",4)
FETCHPARS( "NUC1", nucleus )
FETCHPARS( "SOLVENT", solvent )

// Create files for filtered peaks and a log file of what went on
sprintf(foutname,"%s/data/%s/nmr/%s/%d/pdata/%d/filteredpeaks.txt",disk,user,name,expno,procno);
sprintf(logfile,"%s/data/%s/nmr/%s/%d/pdata/%d/cycalc.log",disk,user,name,expno,procno);
flog=fopen(logfile,"w");
fout=fopen(foutname,"w");
fprintf(flog,"JY=%f, maxcy=%f, mincy=%f, MI=%f\n",JY,maxcy,mincy,jmi);

// Find and read SREG file to allow solvent regions to be ignored
sprintf( sreglist, "%s.%s", nucleus, solvent );
sprintf( sregpath, "%slists/scl/%s", getstan(0,0), sreglist );
fprintf(flog,"region file = %s\n",sregpath);
fptr=fopen(sregpath,"r");
nregions=1;
reglow[1]=250;
reghigh[1]=-20;
if (fptr!=NULL)
{
  fgets(a,100,fptr);
  for(i=1;i<=10;i++)
  {
    if (fscanf(fptr,"%f %f",&reglow[i],&reghigh[i])<2)
    {
      fclose(fptr);
      break;
    }
    else
    {
      nregions=i;
    }
  }
}
if (nregions>1) fprintf(flog,"(%d) regions read successfully\n",nregions);


XWP_PP
XCMD("sendgui convertpeaklist txt")
// Construct path to peak pick file and open it for reading
(void)sprintf(path,"%s/data/%s/nmr/%s/%d/pdata/%d/peak.txt",disk,user,name,expno,procno);
fptr=fopen(path,"r");
if (fptr==NULL)
  {
  Proc_err(DEF_ERR_OPT,"peakfile not found");
  STOREPAR("CY", 40.0)
  fprintf(flog,"unable to open peak pick file: %s\n",path);
  fclose(flog);
  STOP
  }
//Get the peak file header information
fgets(h1,120,fptr);
fgets(h2,120,fptr);
fgets(h3,120,fptr);
fgets(h4,120,fptr);

//Read the peaks from the peak pick file
isave=1;
for (i=1;i<=1000;i++)
{
  if(fscanf(fptr,"%*d %f %f %f %f",&JPA[isave],&JPH[isave],&JPP[isave],&JPI[isave])<3)
     {
     break;
     }
     else
     {
        //keep the peaks if they are not solvent peaks
        peakvalid=0;
        for (j=1;j<=nregions;j++)
        {
          if ((JPP[isave]<reglow[j])&&(JPP[isave]>reghigh[j])) (peakvalid=1);
        }
        if (peakvalid==1) isave++;
     }
}
close(fptr);
//isave=isave-1;
fprintf(flog,"Peak file read and filtered: %d peaks\n",isave);
if (isave<5)
  {
  STOREPAR("CY", 40.0)
  fprintf(flog,"Aborting because fewer than 5 peaks in peak file: %s\n",path);
  fclose(flog);
  STOP
  }

// now remove singlets (multiplet defined as a peak with another one within 10Hz
// and an intensity of more than 0.3 of its intensity)
nmultiplets=0;
for (i=1;i<isave;i++)
{
  if (((JPH[i]-JPH[i+1]<10)&&(JPI[i+1]>0.3*JPI[i]))||((JPH[i-1]-JPH[i]<10)&&(JPI[i-1]>0.3*JPI[i])))
  {
    nmultiplets++;
    TPP[nmultiplets]=JPP[i];
    TPI[nmultiplets]=JPI[i];
    TPA[nmultiplets]=JPA[i];
    TPH[nmultiplets]=JPH[i];
  }
}

fprintf(flog,"%d multiplets detected\n",nmultiplets);
// if there are fewer than 5 multiplet peaks then use all peaks
if (nmultiplets>5)
{
// Now re-fill the array
  isave=nmultiplets;
  for (i=1;i<=isave;i++)
  {
    JPI[i]=TPI[i];
    JPP[i]=TPP[i];
    JPA[i]=TPA[i];
    JPH[i]=TPH[i];
  }
}
// find the biggest peak now they have been filtered
peakmax=0.0;
sumY=0.0;
for (i=1;i<=isave;i++)
{
  sumY=sumY+JPI[i];
  if (JPI[i]>peakmax) peakmax=JPI[i];
}

AvY=sumY/isave; // Calculate the average height
fprintf(flog,"Average peak height = %f, Max height = %f\n",AvY,peakmax);

// Look for peaks > 10% of average
peakmax=peakmax+0.1;
peakmin=0.1*AvY;
fprintf(flog,"Max peak size= %f (not used)\n",peakmax);
fprintf(flog,"Min peak size= %f\n",peakmin);
numpeaks=0;
// Now write out the filtered peak list in Bruker format
fprintf(fout,"%s",h1);
fprintf(fout,"%s",h2);
fprintf(fout,"%s",h3);
fprintf(fout,"%s",h4);
for (i=1;i<=isave;i++) {
   if (JPI[i]>peakmin) {
      numpeaks++;
      sprintf(outstr,"%6d %11.1f %12.3f %12.4f %12.2f\n",numpeaks,JPA[i],JPH[i],JPP[i],JPI[i]);
      fputs(outstr,fout);
      }
   }
fclose(fout);

// Calculate CY based on the largest multiplet peak
cytmp=(initialcy/peakmax)*JY;
fprintf(flog,"Calculated CY value= %f\n",cytmp);

// Rescale if calculated CY is outside boundaries
if (cytmp>maxcy) cytmp=maxcy;
if (cytmp<mincy) cytmp=mincy;
fprintf(flog,"Calculated CY value after limits applied= %f\n",cytmp);
fclose(flog);
sprintf(jcmd,"Calculated CY=%f",cytmp);
Show_status(jcmd);
STOREPAR("CY",cytmp)
/*
sprintf(jcmd,"cp %s %s/data/%s/nmr/%s/%d/pdata/%d/orig_peak.txt",path,disk,user,name,expno,procno);
system(jcmd);
sprintf(jcmd,"mv %s %s",foutname,path);
system(jcmd);
*/
QUIT