/*By Duncan Howe, University of Cambridge, November 2017                  */
/*To automate the process of aquiring a 2D map of a sample, by assembling */
/*1D slice-selective results into a 2D ser file														*/
#include <math.h>

/*Flags - set them to 0 to turn off */
/*debug = 1 for on, 0 for off*/
int debug=0;
/*download = 1 to display pop up, 0 to skip*/
int disclaimer=1;
/*Advice about processing: infomsg = 1 for on, 0 for off*/
int infomsg=1;
 if(disclaimer == 1){
i1 = Proc_err(QUESTION_OPT,"THIS PROGRAM IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL, \
WITHOUT ANY WARRANTY.\n IT IS PROVIDED 'AS IS' WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,\n \
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTY OF FITNESS FOR A PARTICULAR PURPOSE.\n \
THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.\n \
SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\n \ 
REPAIR OR CORRECTION.\n\n \
IN NO EVENT WILL THE AUTHOR BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL,\n \
SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY\n \
TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED\n \ 
INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM\n \
TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE \n \
POSSIBILITY OF SUCH DAMAGES.\n\n \
Click OK to agree and continue. \nClick cancel to disagree.\n\n \
Remove this warning by setting disclaimer to 0 in the program.");

if ( i1 == ERR_CANCEL )
{
ABORT
}
else {
}
} //end of disclaimer

/*default parameters*/

int num_slices = 10;
int gradient = 50; //strength of gradient
int exp_scans = 1;
int loop = 0;
int temp_exp_num = 999; //This is where the 1D aquisitions go
int result_exp = 899; //This is where the result goes. Set to the experiment called from further down. 899 is popt default.
int tmp_int=10;
int choice_ok = 0;
int orig_td = 8192;
int max_slices = 50;
float bandwidth_hz = 5000.0; //This is the the bandwidth to be irradiated
float offset_hz = 150000.0; //region of tube to observe over (+/-)
float offset_inc = 1; //The offset between each slice;
float exp_gradient = 50; //The gradient strength to use;
float bottom_hz = 0-offset_hz;
float exp_rg = 8;
float exp_d1 = 1;
float tmpfloat = 0;
double orig_o1 = 0.0;
double orig_sw = 10.0;
double orig_sfo1 = 0.0;
char tmpstr[1024];
char qtext[1024];
char titlefile[PATH_MAX];
char logfile[PATH_MAX];
char nucleus[8];
char paramset[PATH_MAX];
char paramfilePathname[PATH_MAX];
//hardcoded limits
float bandwidth_hz_lower_limit = 2500;
float bandwidth_hz_upper_limit = 10000;
float gradient_upper_limit = 95; //max gradient power;
int max_scans = 1024;
float min_d1 = 1;
float max_d1 = 60;
float min_rg = 0.25;
float max_rg = 1024;
float max_offset = 500000; //limited by the nyquist theorem apparently. So should be possible to calculate...
float shape_length = 0.0;
float shape_power = 0.0;
float shape_power_dbw = 0.0;


FILE *ftitle = NULL;
/*Get the parameters of what nuclei, sw etc from current dataset*/
FETCHPAR("NUC1",&nucleus);
FETCHPAR("TD",&orig_td);
FETCHPAR("O1", &orig_o1);
FETCHPAR("SW", &orig_sw);
FETCHPAR("SFO1", &orig_sfo1);



i1 = Proc_err(QUESTION_OPT,"Using nucleus - %s \n OK or Cancel experiment?",nucleus);
if ( i1 == ERR_CANCEL )
{
   ABORT
}
else {
}

//Now set slice width
for(;;)
{
	sprintf(qtext, "What iraddiation bandwidth in Hz would you like. Careful, may lead to long, powerful pulses. Will be nuclie dependent. Hardcoded limits are :- Min = %f Max = %f",bandwidth_hz_lower_limit,bandwidth_hz_upper_limit);
	GETFLOAT(qtext,bandwidth_hz)
	if(bandwidth_hz >= bandwidth_hz_lower_limit && bandwidth_hz <= bandwidth_hz_upper_limit )
		{break;}
}

while (choice_ok != 2) //have to get two things correct...
{
	choice_ok = 0;
	GETFLOAT("What offset in hz away from 0 to takes slices over. At 500MHz, with 1H a 50% gradient, and slice bandwidth of 5000, 166666 is the maximum",offset_hz);
	if ( (offset_hz < 0) || (offset_hz > max_offset) ) 
	{
		Proc_err(INFO_OPT, "%f seems wrong or outside defaults, try again",offset_hz);
	}
	else {
		choice_ok++;
	}
	
	if ( (offset_hz < bandwidth_hz)  )
	{
		Proc_err(INFO_OPT, "Offset needs to be more or equal to slice width - %f",bandwidth_hz);
	}
	else {
		choice_ok++;
	}
	
}

choice_ok = 0; //in case we want to use this method again
bottom_hz = 0-offset_hz;

//Now set number of slices
while (choice_ok != 2) //have to get two things correct...
{
	choice_ok = 0;
	GETINT("Number of slices on either side of zero",tmp_int);
	tmpfloat = ((offset_hz*2)/(tmp_int*2));
	if ( ( (tmp_int < 0) || (tmp_int > max_slices) ) )
		{
		Proc_err(INFO_OPT, "%i is a crazy number, try again",tmp_int);
		}
		else {
		choice_ok++;
		}	
	if ( (tmpfloat < bandwidth_hz) )
		{
		Proc_err(INFO_OPT, "%i gives an offset increment less than the slice width, which doesn't make sense",tmp_int);
		Proc_err(INFO_OPT, "The slice width would be %f and needs to be more than %i", tmpfloat,bandwidth_hz);
		}
		else {
		choice_ok++;
		}
	
	
}
choice_ok = 0; //in case we want to use this method again
num_slices = (tmp_int *2)+1; //we want it to go through 0 really

//Now set gradient strength
for (;;)
{
	sprintf(qtext, "What gradient strength would you like? (Less than %f)",gradient_upper_limit);
	GETFLOAT(qtext,exp_gradient);
	if(gradient_upper_limit >=1 && exp_gradient <= gradient_upper_limit )
		{break;}
}

//Now set d1
for (;;)
{
	sprintf(qtext, "What d1 would you like (Min/Max - %f,%f)",min_d1,max_d1);
	GETFLOAT(qtext,exp_d1);
	if(exp_d1 >= min_d1 && exp_d1 <= max_d1 )
		{break;}
}

//Now set rg
for (;;)
{
	sprintf(qtext, "What RG would you like (Min/Max - %f,%f)",min_rg,max_rg);
	GETFLOAT(qtext,exp_rg);
	if(exp_rg >= min_rg && exp_rg <= max_rg )
		{break;}
}
//Now set NS
for (;;)
{
	sprintf(qtext, "What NS would you like (Min/Max - 1,%i)",max_scans);
	GETINT(qtext,exp_scans);
	if(exp_scans >= 1&& exp_scans <= max_scans )
		{break;}
}

GETCURDATA
//Now need to set up 2d experiment for data to go into.
sprintf(paramset, "slice-select-2d");
if (getParfileDirForRead(paramset, PAR_DIRS, paramfilePathname)< 0)
{
Proc_err(DEF_ERR_OPT, "Parameter set - %s - %s\n Aborting - Check README", paramset, paramfilePathname);
ABORT
}
RPAR(paramset,"all") //wipes the dataset au program called from
GETCURDATA
result_exp=expno;
/*setup 2d parameters*/
STOREPARN(2,"SW", orig_sw)
STOREPARNS(2, "SW", orig_sw)
STOREPARN(2,"TD", orig_td)
STOREPARNS(2,"TD", orig_td)
STOREPARN(1,"TD", num_slices)
STOREPARNS(1,"TD", num_slices)
STOREPAR("SFO1", orig_sfo1)
STOREPARN(2,"SFO1", orig_sfo1)
STOREPARNS(2,"SFO1", orig_sfo1)
FETCHPARN(1,"TD", &tmp_int)
Proc_err(INFO_OPT,"Fetched TD = %i",tmp_int);
GETCURDATA
//finished 2d setup

/*setup temp experiment to run the slices in*/
DATASET(name,temp_exp_num,1,disk,user) //switches to 1d experiment
VIEWDATA_SAMEWIN
sprintf(paramset, "slice-select-%s", nucleus);
if (getParfileDirForRead(paramset, PAR_DIRS, paramfilePathname)< 0)
{
Proc_err(DEF_ERR_OPT, "Parameter set - %s - %s\nAborting - Check README", paramset, paramfilePathname);
ABORT
}
RPAR(paramset,"all")
SETCURDATA
//Now set the 1d experiment up
//STOREPAR("NUC1",nucleus) THIS DOESNT WORK! DOESNT CHANGE THE ROUTING!COULD BE VERY UNSAFE!

GETPROSOL
//II
STOREPAR("TD", orig_td)
STOREPAR("O1", orig_o1)
STOREPAR("SW", orig_sw)
STOREPAR("CNST 19",bandwidth_hz)
STOREPAR("GPZ 1",exp_gradient)
STOREPAR("NS", exp_scans)
STOREPAR("RG", exp_rg)
STOREPAR("D 1", exp_d1)
XAU("wvm", "-a") //run wavemaker to set pulses
offset_inc = (offset_hz*2)/(num_slices-1); //because we're calculating the gaps...
offset_hz = bottom_hz; //starts with negative value, which is bottom of tube
GETCURDATA
//add some info to the title and add to a logfile
sprintf( titlefile, "%s%s/%s/%i/pdata/1/title", disk, user, name, result_exp);
sprintf( tmpstr, "Slice selective NMR.  \nNo. Slices - %i\nIrradiation bandwidth in Hz - %f\nGradient strength percent - %f", num_slices, bandwidth_hz, exp_gradient );
ftitle = fopen( titlefile, "w");
	fputs( tmpstr, ftitle);	
fclose( ftitle );
//Logfile of whats been done
sprintf( logfile,"%s%s/%s/%i/slice-log.csv", disk, user, name, result_exp);
//Finished 1d setup

//This is the main loop runing the experiment
//Give a last warning and run
FETCHPAR("P 11", &shape_length);
FETCHPAR("SPW 1", &shape_power);
shape_power_dbw = fabs( 10 * (log10(shape_power)) );

i1 = Proc_err(QUESTION_OPT,"Going to use the following parameters for pulses:- \n \
bandwidth desired = %f - From FETCHPAR. \n \
shape pulse length = %f - From FETCHPAR. \n \
shape pulse power = %f watts, %f dBW - Calculated from above. \n \
\n BE SURE THEY ARE NOT GOING TO DAMAGE THE PROBE \n \
\n OK or Cancel experiment?",bandwidth_hz,shape_length,shape_power,shape_power_dbw);
if ( i1 == ERR_CANCEL )
{
   ABORT
}
	else 
{
}
II
TIMES(num_slices) //we want it to go through 0 really
	loop++;
	STOREPAR("SPOFFS 1",offset_hz)
	sprintf(tmpstr,"\nLoop = %i Spoffs1 = %f ",loop,offset_hz);
	Proc_err(INFO_OPT,"%s",tmpstr);
	ZG
	//Write spoffs user for this slice to title file
	WSER(loop,name,result_exp,1,disk,user)
	ftitle = fopen( titlefile, "a");
		fputs( tmpstr, ftitle);	
	fclose( ftitle );
	//Now write into a log file, csv.
	sprintf(tmpstr,"%i,%f\n",loop,offset_hz);
	ftitle = fopen( logfile,"a");
		fputs( tmpstr, ftitle);
	fclose( ftitle );
	offset_hz = offset_hz+offset_inc;
END
DATASET(name,result_exp,1,disk,user) //go back to datset called from with the written ser file in
VIEWDATA_SAMEWIN
QUIT
	


