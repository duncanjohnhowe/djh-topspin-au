
int num_slices = 10;
int gradient = 50; //strength of gradient
int exp_scans = 1;
int loop = 0;
int temp_exp_num = 999; //This is where the 1D aquisitions go
int result_exp = 899; //This is where the result goes. Set to the experiment called from further down. 899 is popt default.
int tmp_int=10;
int choice_ok = 0;
int orig_td = 8192;
float slice_hz = 5000.0; //This is the thickness of the slice; will be related to nuclei/gradient power.(MHz?)
float offset_hz = 150000.0; //region of tube to observe over (+/-)
float offset_inc = 1; //The offset between each slice;
float exp_gradient = 50; //The gradient strength to use;
float bottom_hz = 0-offset_hz;
float exp_rg = 8;
float exp_d1 = 1;
float tmpfloat = 0;
double orig_o1 = 0.0;
double orig_sw = 10.0;
double orig_sfo1 = 0.0;
char tmpstr[1024];
char qtext[1024];
char titlefile[PATH_MAX];
char logfile[PATH_MAX];
char nucleus[8];
char paramset[PATH_MAX];
char paramfilePathname[PATH_MAX];
//hardcoded limits
float slice_hz_lower_limit = 2500;
float slice_hz_upper_limit = 10000;
float gradient_upper_limit = 95; //max gradient power;
int max_scans = 1024;
float min_d1 = 1;
float max_d1 = 60;
float min_rg = 0.25;
float max_rg = 1024;
float max_offset = 500000;

FILE *ftitle = NULL;
/*insert user interaction here for gradient, number slices, offset and checking.*/
FETCHPAR("NUC1",&nucleus);
FETCHPAR("TD",&orig_td);
FETCHPAR("O1", &orig_o1);
FETCHPAR("SW", &orig_sw);
FETCHPAR("SFO1", &orig_sfo1);
Proc_err(INFO_OPT,"Using nucleus - %s",nucleus);

while (choice_ok != 2) //have to get two things correct...
{
	choice_ok = 0;
	GETINT("What offset in hz away from 0 to takes slices over. With 1H and a 50% gradient, 160000 covers the tube.",offset_hz);
	if ( (offset_hz < 0) || (offset_hz > max_offset) ) 
	{
		Proc_err(INFO_OPT, "%f is a crazy number, try again",offset_hz);
	}
	else {
		choice_ok++;
	}
	
	if ( (offset_hz < slice_hz)  )
	{
		Proc_err(INFO_OPT, "Offset needs to be more or equal to slice width - %f",slice_hz);
	}
	else {
		choice_ok++;
	}
	
}

choice_ok = 0; //in case we want to use this method again
bottom_hz = 0-offset_hz;
//Now set slice width
for(;;)
{
	sprintf(qtext, "What slice width in Hz would you like. Carefull, may lead to long, powerful pulses. Stick with the default if possible. Hardcoded limits are :- Min = %f Max = %f",slice_hz_lower_limit,slice_hz_upper_limit);
	GETFLOAT(qtext,slice_hz)
	if(slice_hz >= slice_hz_lower_limit && slice_hz <= slice_hz_upper_limit )
		{break;}
}
//Now set number of slices
while (choice_ok != 2) //have to get two things correct...
{
	choice_ok = 0;
	GETINT("Number of slices on either side of zero",tmp_int);
	tmpfloat = ((offset_hz*2)/(tmp_int*2));
	if ( ( (tmp_int < 0) || (tmp_int > 50) ) )
		{
		Proc_err(INFO_OPT, "%i is a crazy number, try again",tmp_int);
		}
		else {
		choice_ok++;
		}	
	if ( (tmpfloat < slice_hz) )
		{
		Proc_err(INFO_OPT, "%i gives an offset increment less than the slice width, which doesn't make sense",tmp_int);
		Proc_err(INFO_OPT, "The slice width would be %f and needs to be more than %i", tmpfloat,slice_hz);
		}
		else {
		choice_ok++;
		}
	
	
}
choice_ok = 0; //in case we want to use this method again
num_slices = (tmp_int *2)+1; //we want it to go through 0 really

//Now set gradient strength
for (;;)
{
	sprintf(qtext, "What gradient strength would you like? (Less than %f)",gradient_upper_limit);
	GETFLOAT(qtext,exp_gradient);
	if(gradient_upper_limit >=1 && exp_gradient <= gradient_upper_limit )
		{break;}
}

//Now set d1
for (;;)
{
	sprintf(qtext, "What d1 would you like (Min/Max - %f,%f)",min_d1,max_d1);
	GETFLOAT(qtext,exp_d1);
	if(exp_d1 >= min_d1 && exp_d1 <= max_d1 )
		{break;}
}

//Now set rg
for (;;)
{
	sprintf(qtext, "What RG would you like (Min/Max - %f,%f)",min_rg,max_rg);
	GETFLOAT(qtext,exp_rg);
	if(exp_rg >= min_rg && exp_rg <= max_rg )
		{break;}
}
//Now set NS
for (;;)
{
	sprintf(qtext, "What NS would you like (Min/Max - 1,%i)",max_scans);
	GETINT(qtext,exp_scans);
	if(exp_scans >= 1&& exp_scans <= max_scans )
		{break;}
}

GETCURDATA
RPAR("slice-select-2d","all") //wipes the dataset au program called from
GETCURDATA
result_exp=expno;
/*setup 2d parameters*/
STOREPARN(2,"SW", orig_sw)
STOREPARNS(2, "SW", orig_sw)
STOREPARN(2,"TD", orig_td)
STOREPARNS(2,"TD", orig_td)
STOREPARN(1,"TD", num_slices)
STOREPARNS(1,"TD", num_slices)
STOREPAR("SFO1", orig_sfo1)
STOREPARN(2,"SFO1", orig_sfo1)
STOREPARNS(2,"SFO1", orig_sfo1)
FETCHPARN(1,"TD", &tmp_int)
Proc_err(INFO_OPT,"Fetched TD = %i",tmp_int);
GETCURDATA
/*setup temp experiment to run the slices in*/
DATASET(name,temp_exp_num,1,disk,user) //switches to 1d experiment
VIEWDATA_SAMEWIN
sprintf(paramset, "slice-select-%s", nucleus);
if (getParfileDirForRead(paramset, PAR_DIRS, paramfilePathname)< 0)
{
Proc_err(DEF_ERR_OPT, "Parameter set - %s - %s\nCheck README", paramset, paramfilePathname);
ABORT
}
RPAR(paramset,"all")
SETCURDATA
//Now set the 1d experiment up
//STOREPAR("NUC1",nucleus) THIS DOESNT WORK! DOESNT CHANGE THE ROUTING!COULD BE VERY UNSAFE!

GETPROSOL
II
STOREPAR("TD", orig_td)
STOREPAR("O1", orig_o1)
STOREPAR("SW", orig_sw)
STOREPAR("CNST 19",slice_hz)
STOREPAR("GPZ 1",exp_gradient)
STOREPAR("NS", exp_scans)
STOREPAR("RG", exp_rg)
STOREPAR("D 1", exp_d1)
XAU("wvm", "-a") //run wavemaker to set pulses
offset_inc = (offset_hz*2)/(num_slices-1); //because we're calculating the gaps...
offset_hz = bottom_hz; //starts with negative value, which is bottom of tube
GETCURDATA

sprintf( titlefile, "%s%s/%s/%i/pdata/1/title", disk, user, name, result_exp);
sprintf( tmpstr, "Slice selective NMR.  \nNo. Slices - %i\nSlice width in Hz - %f\nGradient strength percent - %f", num_slices, slice_hz, exp_gradient );
ftitle = fopen( titlefile, "w");
	fputs( tmpstr, ftitle);	
fclose( ftitle );
//Logfile of whats been done
sprintf( logfile,"%s%s/%s/%i/slice-log.csv", disk, user, name, result_exp);
TIMES(num_slices) //we want it to go through 0 really
	loop++;
	STOREPAR("SPOFFS 1",offset_hz)
	sprintf(tmpstr,"\nLoop = %i Spoffs1 = %f ",loop,offset_hz);
	Proc_err(INFO_OPT,"%s",tmpstr);
//	ZG
	//Write spoffs user for this slice to title file
	WSER(loop,name,result_exp,1,disk,user)
	ftitle = fopen( titlefile, "a");
		fputs( tmpstr, ftitle);	
	fclose( ftitle );
	//Now write into a log file, csv.
	sprintf(tmpstr,"%i,%f\n",loop,offset_hz);
	ftitle = fopen( logfile,"a");
		fputs( tmpstr, ftitle);
	fclose( ftitle );
	offset_hz = offset_hz+offset_inc;
END
DATASET(name,result_exp,1,disk,user) //go back to datset called from with the written ser file in
VIEWDATA_SAMEWIN
QUIT
	

